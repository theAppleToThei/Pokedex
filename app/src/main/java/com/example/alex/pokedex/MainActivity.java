package com.example.alex.pokedex;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Space;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    CardBuilder card;

    String pokemonCalled;
    URL pokeAPI;
    String pokeJSON;
    Pokemon currentPokemon;

    private Handler mHandler = new Handler();

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        ArrayList<String> voiceResults = getIntent().getExtras()
                .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);
        pokemonCalled = voiceResults.get(0);
        Log.i("Pokedex", pokemonCalled);

        ActionBar actionBar = getActionBar();
        actionBar.setIcon(R.drawable.black_pokeball);
        actionBar.setTitle(pokemonCalled);
        actionBar.hide();

        mView = buildView();

        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                buildResultView();
            }
        }, 5);

        try {
            pokeAPI = new URL("http://pokeapi.co/api/v2/pokemon/" + pokemonCalled.toLowerCase());
        } catch (MalformedURLException m) {
            m.printStackTrace();
        }

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
        new getPokemon().execute();
    }


    public String getPokemonCalled() {
        return pokemonCalled;
    }

    public URL getURL() {
        return pokeAPI;
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
        ArrayList<String> voiceResults = getIntent().getExtras()
                .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);
        pokemonCalled = voiceResults.get(0);
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        card = new CardBuilder(MainActivity.this, CardBuilder.Layout.TEXT);
        card.setText("Loading...");
        return card.getView();
    }

    private View buildResultView() {
        card = new CardBuilder(MainActivity.this, CardBuilder.Layout.TEXT);
        card.setIcon(R.drawable.white_pokeball);
        card.setText(currentPokemon.name);
        card.setFootnote("#" + currentPokemon.pokedexNumber);
        return card.getView();
    }

    private static String getStringFromInputStream(InputStream is) {

        BufferedReader br = null;
        StringBuilder sb = new StringBuilder();

        String line;
        try {

            br = new BufferedReader(new InputStreamReader(is));
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return sb.toString();
    }

    private class getPokemon extends
            AsyncTask<String, String, String> {
        String link;

        @Override
        protected void onPreExecute() {
            Log.i("Pokedex", "Made it to onPreExecute()");
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {
            Log.i("Pokedex", "Made it to doInBackground()");

            try {
                URL url = getURL();
                URLConnection connection;
                connection = url.openConnection();

                HttpURLConnection httpConnection = (HttpURLConnection) connection;
                int responseCode = httpConnection.getResponseCode();

                String response;
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    InputStream in = httpConnection.getInputStream();
                    pokeJSON = getStringFromInputStream(in);
                    Log.i("Pokedex", "response = " + pokeJSON);
                    if (pokeJSON.equals("404 HTTP/2.0 404")) {
                        new AlertDialog(MainActivity.this, R.drawable.ic_stat_name, R.string.alert_text,
                                R.string.alert_footnote_text, mOnClickListener).show();
                    }
                    currentPokemon = new Pokemon(pokeJSON);
                } else {
                    Log.e("Pokedex", "Connection was not ok");
                    return null;
                }
            } catch (Exception e) {
                e.printStackTrace();
                Log.e("Pokedex", "Error After Program Start: " + e);
            }

            return "Error";
        }

        @Override
        protected void onPostExecute(String result) {
            mView = buildResultView();
        }

        @Override
        protected void onProgressUpdate(String... values) {
        }
    }

    private final DialogInterface.OnClickListener mOnClickListener =
            new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int button) {
                }
            };
}